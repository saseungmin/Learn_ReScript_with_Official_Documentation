// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Curry = require("rescript/lib/js/curry.js");

function getProfession(person) {
  if (person) {
    return "A director";
  } else {
    return "A teacher";
  }
}

var School = {
  person1: /* Teacher */0,
  getProfession: getProfession
};

console.log("A teacher");

var message = "hello";

var NestedModule = {
  message: message
};

var MyModule = {
  NestedModule: NestedModule
};

var t = "A teacher";

function getAudience(excited) {
  if (excited) {
    return "world!";
  } else {
    return "world";
  }
}

var BaseComponent = {
  defaultGreeting: "Hello",
  getAudience: getAudience
};

var defaultGreeting = "Hey";

function render(param) {
  return "Hey world!";
}

var ActualComponent = {
  getAudience: getAudience,
  defaultGreeting: defaultGreeting,
  render: render
};

function MakeSet(Item) {
  var add = function (currentSet, newItem) {
    if (List.exists((function (x) {
              return Curry._2(Item.equal, x, newItem);
            }), currentSet)) {
      return currentSet;
    } else {
      return {
              hd: newItem,
              tl: currentSet
            };
    }
  };
  return {
          empty: /* [] */0,
          add: add
        };
}

function equal(param, param$1) {
  if (param[0] === param$1[0]) {
    return param[1] === param$1[1];
  } else {
    return false;
  }
}

function create(x, y) {
  return [
          x,
          y
        ];
}

var IntPair = {
  equal: equal,
  create: create
};

function add(currentSet, newItem) {
  if (List.exists((function (x) {
            return equal(x, newItem);
          }), currentSet)) {
    return currentSet;
  } else {
    return {
            hd: newItem,
            tl: currentSet
          };
  }
}

var SetOfIntPairs = {
  empty: /* [] */0,
  add: add
};

var anotherPerson = /* Teacher */0;

exports.School = School;
exports.anotherPerson = anotherPerson;
exports.MyModule = MyModule;
exports.message = message;
exports.t = t;
exports.BaseComponent = BaseComponent;
exports.ActualComponent = ActualComponent;
exports.MakeSet = MakeSet;
exports.IntPair = IntPair;
exports.SetOfIntPairs = SetOfIntPairs;
/*  Not a pure module */
