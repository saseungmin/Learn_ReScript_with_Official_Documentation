// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var List = require("rescript/lib/js/list.js");
var Js_exn = require("rescript/lib/js/js_exn.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function getItem(items) {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var result;

try {
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn.RE_EXN_ID === "Not_found") {
    result = 0;
  } else {
    throw exn;
  }
}

var myItems = {
  hd: 1,
  tl: {
    hd: 2,
    tl: {
      hd: 3,
      tl: /* [] */0
    }
  }
};

var exit = 0;

var item;

try {
  item = List.find((function (i) {
          return i === 4;
        }), myItems);
  exit = 1;
}
catch (raw_exn$1){
  var exn$1 = Caml_js_exceptions.internalToOCamlException(raw_exn$1);
  if (exn$1.RE_EXN_ID === "Not_found") {
    console.log("No such item found!");
  } else {
    throw exn$1;
  }
}

if (exit === 1) {
  console.log(item);
}

function someJSFunctionThatThrows(param) {
  return Js_exn.raiseError("someJSFunctionThatThrows!");
}

try {
  Js_exn.raiseError("someJSFunctionThatThrows!");
}
catch (raw_obj){
  var obj = Caml_js_exceptions.internalToOCamlException(raw_obj);
  if (obj.RE_EXN_ID === Js_exn.$$Error) {
    var m = obj._1.message;
    if (m !== undefined) {
      console.log("Caught a JS exception! Message: " + m);
    }
    
  } else {
    throw obj;
  }
}

function myTest(param) {
  return Js_exn.raiseError("Hello!");
}

var BadArgument = /* @__PURE__ */Caml_exceptions.create("Exception.BadArgument");

function myTest1(param) {
  throw {
        RE_EXN_ID: BadArgument,
        myMessage: "Oops!",
        Error: new Error()
      };
}

var theItem = 4;

exports.getItem = getItem;
exports.result = result;
exports.myItems = myItems;
exports.theItem = theItem;
exports.someJSFunctionThatThrows = someJSFunctionThatThrows;
exports.myTest = myTest;
exports.BadArgument = BadArgument;
exports.myTest1 = myTest1;
/* result Not a pure module */
